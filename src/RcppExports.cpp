// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// LLC_cpp
double LLC_cpp(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cpp(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cpp(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cpps
double LLC_cpps(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cpps(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cpps(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cppl
double LLC_cppl(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cppl(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cppl(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cppls
double LLC_cppls(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cppls(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cppls(X, L, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CppLangComp_LLC_cpp", (DL_FUNC) &_CppLangComp_LLC_cpp, 3},
    {"_CppLangComp_LLC_cpps", (DL_FUNC) &_CppLangComp_LLC_cpps, 3},
    {"_CppLangComp_LLC_cppl", (DL_FUNC) &_CppLangComp_LLC_cppl, 3},
    {"_CppLangComp_LLC_cppls", (DL_FUNC) &_CppLangComp_LLC_cppls, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CppLangComp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
