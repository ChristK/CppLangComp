// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// LLC_c
double LLC_c(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_c(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_c(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cs
double LLC_cs(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cs(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cs(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cl
double LLC_cl(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cl(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cl(X, L, A));
    return rcpp_result_gen;
END_RCPP
}
// LLC_cls
double LLC_cls(NumericVector X, double L, double A);
RcppExport SEXP _CppLangComp_LLC_cls(SEXP XSEXP, SEXP LSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LLC_cls(X, L, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CppLangComp_LLC_c", (DL_FUNC) &_CppLangComp_LLC_c, 3},
    {"_CppLangComp_LLC_cs", (DL_FUNC) &_CppLangComp_LLC_cs, 3},
    {"_CppLangComp_LLC_cl", (DL_FUNC) &_CppLangComp_LLC_cl, 3},
    {"_CppLangComp_LLC_cls", (DL_FUNC) &_CppLangComp_LLC_cls, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CppLangComp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
